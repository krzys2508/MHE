#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <sstream>
#include <algorithm>
#include <numeric>
#include <random>
#include <functional>
using namespace std;

using my_vector = vector<int>;
using my_result_vector = vector<vector<int>>;

mt19937 rand_gen(1);

my_vector generateRandomProblem(int n)
{
    vector<int> vector;
    uniform_int_distribution<int> distr(0, n * 2);
    for (int i = 0; i < n; i++)
    {
        vector.push_back(distr(rand_gen));
    }
    return vector;
}

ostream &operator<<(ostream &o, vector<double> v)
{
    for (auto e : v)
    {
        o << e << ",";
    }
    return o;
}

double goal_solution(my_result_vector v)
{
    int numberOfPartitions = v.size();
    double score = 0;
    int target = 0;
    for (int j = 0; j < v.size(); j++)
    {
        target += accumulate(v[j].begin(), v[j].end(), 0);
    }
    int expecedSum = target / numberOfPartitions;
    {
        for (int i = 0; i < v.size(); i++)
        {
            int size = v[i].size();
            int sum = accumulate(v[i].begin(), v[i].end(), 0);
            if (size != 3)
            {
                score += 1;
            }
            if (sum != target)
            {
                score += 1;
            }
        }
    }
    return score;
}

my_result_vector generate_solution(my_vector v)
{
    int sum = accumulate(v.begin(), v.end(), 0);
    // cout<<sum<<endl;
    int size = v.size();
    // cout<<size<<endl;
    int numberOfPartitions = size / 3;
    vector<vector<int>> result(numberOfPartitions);
    int targetSumPerPartition = sum / numberOfPartitions;
    int partitionIndex = 0;
    if (sum % 3 == 0)
    {
        while (v.size())
        {
            uniform_int_distribution<int> distr(0, v.size() - 1);
            int index = distr(rand_gen);
            int value = v.at(index);
            if (result[partitionIndex].size() < 3)
            {
                result[partitionIndex].push_back(value);
                cout << "number " << value << "has been added to partition number " << partitionIndex << endl;
                v.erase(v.begin() + index);
            }
            else
            {
                cout << "rising partition index " << endl;
                partitionIndex++;
            }
        }
    }
    else
    {
        cout << "Cannot be partitioned";
    }
    return result;
}

my_result_vector get_next_point(my_result_vector p)
{
    my_vector workedOn;
    my_vector workedOn2;
    int partitionIndex = 0;
    int size = 0;
    for (int i = 0; i < p.size(); i++)
    {
        for (int j = 0; j < p[i].size(); j++)
        {
            workedOn.push_back(p[i][j]);
        }
    }
      for (int i = 0; i<workedOn.size();i++){
          cout<<workedOn[i]<<endl;
      }
for (int i = 0; i<workedOn.size();i++){
    sort(workedOn.begin(), workedOn.end());
    do
    {
        workedOn2.push_back(workedOn[i]);
    }while(next_permutation(workedOn.begin(),workedOn.end()));
}
my_result_vector allPermutations (workedOn2.size()/4);
        for(int k = 0; k<workedOn2.size(); k++)
        {
            int value = workedOn2.at(k);
            if (allPermutations[partitionIndex].size() < 3)
            {
                allPermutations[partitionIndex].push_back(value);
            }
            else
            {
                partitionIndex++;
                size = 0;
            }
        }

        //   cout<<allPermutations[0][0];
    return allPermutations;
}


my_vector loadData(string fname)
{
    ifstream inputfile(fname);
    my_vector result;
    string line;
    int value;
    while (inputfile >> value)
    {
        if (value > 0)
        {
            result.push_back(value);
        }
    }
    return result;
}

void printProblem(my_vector vec)
{
    for (int value : vec)
    {
        cout << value << " ";
    }
}

void printAllPermutations(my_result_vector res)
{
               for (auto a : res){
                   cout<<"{";
                for(auto b: a){
                    cout<<b;
                }
                cout<<"}";
            }
            cout<<endl;
}
int getTarget(my_vector v)
{
    int sum = accumulate(v.begin(), v.end(), 0);
    int size = v.size();
    int numberOfPartitions = size / 3;
    int targetSumPerPartition = sum / numberOfPartitions;

    return targetSumPerPartition;
}

int main(int argc, char **argv)
{
    auto problemg = generateRandomProblem(9);
    string directory = "C:\\Users\\krzys\\Desktop\\szkola\\MHE\\";
    auto problem = loadData(directory + argv[1]);
    cout << "Values uploaded: " << endl;
    printProblem(problem);
    cout << endl;
    my_result_vector randomResult;
    randomResult = generate_solution(problem);
    my_result_vector permutations = get_next_point(randomResult);
    printAllPermutations(permutations);
    // double score = goal_solution(randomResult, target);
    // brute_force(problem, target);
    // cout<<score;
    return 0;
}
